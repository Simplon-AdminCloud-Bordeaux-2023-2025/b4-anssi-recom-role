---
###############################################################################
#
# Ansible Playbook for ANSSI-BP-028 (intermediary)
#
# Profile Description:
# This profile contains configurations that align to ANSSI-BP-028 v2.0 at the intermediary hardening level.
# ANSSI is the French National Information Security Agency, and stands for Agence nationale de la sécurité des systèmes d'information.
# ANSSI-BP-028 is a configuration recommendation for GNU/Linux systems.
# A copy of the ANSSI-BP-028 can be found at the ANSSI website:
# https://www.ssi.gouv.fr/administration/guide/recommandations-de-securite-relatives-a-un-systeme-gnulinux/
# An English version of the ANSSI-BP-028 can also be found at the ANSSI website:
# https://cyber.gouv.fr/publications/configuration-recommendations-gnulinux-system
#
###############################################################################

- name: Ensure aide is installed
  package:
    name: aide
    state: present
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Build and Test AIDE Database - Ensure AIDE Is Installed
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  with_items:
    - aide
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Build and Test AIDE Database - Build and Test AIDE Database
  ansible.builtin.command: /usr/sbin/aide --init
  changed_when: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Build and Test AIDE Database - Check Whether the Stock AIDE Database Exists
  ansible.builtin.stat:
    path: /var/lib/aide/aide.db.new.gz
  register: aide_database_stat
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Build and Test AIDE Database - Stage AIDE Database
  ansible.builtin.copy:
    src: /var/lib/aide/aide.db.new.gz
    dest: /var/lib/aide/aide.db.gz
    backup: true
    remote_src: true
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - (aide_database_stat.stat.exists is defined and aide_database_stat.stat.exists)
- name: Ensure sudo is installed
  package:
    name: sudo
    state: present
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure env_reset is enabled in /etc/sudoers
  lineinfile:
    path: /etc/sudoers
    regexp: ^[\s]*Defaults.*\benv_reset\b.*$
    line: Defaults env_reset
    validate: /usr/sbin/visudo -cf %s
- name: Ensure ignore_dot is enabled in /etc/sudoers
  lineinfile:
    path: /etc/sudoers
    regexp: ^[\s]*Defaults.*\bignore_dot\b.*$
    line: Defaults ignore_dot
    validate: /usr/sbin/visudo -cf %s
- name: Ensure noexec is enabled in /etc/sudoers
  lineinfile:
    path: /etc/sudoers
    regexp: ^[\s]*Defaults.*\bnoexec\b.*$
    line: Defaults noexec
    validate: /usr/sbin/visudo -cf %s
- name: Ensure requiretty is enabled in /etc/sudoers
  lineinfile:
    path: /etc/sudoers
    regexp: ^[\s]*Defaults.*\brequiretty\b.*$
    line: Defaults requiretty
    validate: /usr/sbin/visudo -cf %s
- name: Ensure umask is enabled with the appropriate value in /etc/sudoers
  lineinfile:
    path: /etc/sudoers
    regexp: ^[\s]*Defaults\s(.*)\bumask=[-]?.+\b(.*)$
    line: Defaults \1umask={{ var_sudo_umask }}\2
    validate: /usr/sbin/visudo -cf %s
    backrefs: true
  register: edit_sudoers_umask_option
- name: Enable umask option with appropriate value in /etc/sudoers
  lineinfile:
    path: /etc/sudoers
    line: Defaults umask={{ var_sudo_umask }}
    validate: /usr/sbin/visudo -cf %s
  when: edit_sudoers_umask_option is defined and not edit_sudoers_umask_option.changed
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Ensure use_pty is enabled in /etc/sudoers
  lineinfile:
    path: /etc/sudoers
    regexp: ^[\s]*Defaults.*\buse_pty\b.*$
    line: Defaults use_pty
    validate: /usr/sbin/visudo -cf %s
  when: '"sudo" in ansible_facts.packages'
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Make changes to /etc/pam.d/login
  lineinfile:
    path: /etc/pam.d/login
    create: false
    regexp: ^\s*session\s+required\s+pam_namespace.so\s*$
    line: session    required     pam_namespace.so
    state: present
  when: '"pam" in ansible_facts.packages'
- name: Direct root Logins Not Allowed
  copy:
    dest: /etc/securetty
    content: ""
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Create /tmp/tmp-inst directory
  file:
    path: /tmp/tmp-inst
    state: directory
    mode: "000"
    seuser: system_u
    serole: object_r
    setype: tmp_t
- name: Make changes to /etc/security/namespace.conf
  lineinfile:
    path: /etc/security/namespace.conf
    create: false
    regexp: ^\s*/tmp\s+/tmp/tmp-inst/\s+level\s+root,adm$
    line: /tmp     /tmp/tmp-inst/        level      root,adm
    state: present
- name: Create /var/tmp/tmp-inst directory
  file:
    path: /var/tmp/tmp-inst
    state: directory
    mode: "000"
    seuser: system_u
    serole: object_r
    setype: tmp_t
- name: Make changes to /etc/security/namespace.conf
  lineinfile:
    path: /etc/security/namespace.conf
    create: false
    regexp: ^\s*/var/tmp\s+/var/tmp/tmp-inst/\s+level\s+root,adm$
    line: /var/tmp /var/tmp/tmp-inst/    level      root,adm
    state: present
- name: Correct any occurrence of TMOUT in /etc/profile
  replace:
    path: /etc/profile
    regexp: ^[^#].*TMOUT=.*
    replace: typeset -xr TMOUT={{ var_accounts_tmout }}
  register: profile_replaced
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Set Interactive Session Timeout
  lineinfile:
    path: /etc/profile.d/tmout.sh
    create: true
    regexp: TMOUT=
    line: typeset -xr TMOUT={{ var_accounts_tmout }}
    state: present
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure audit is installed
  package:
    name: audit
    state: present
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Enable service auditd
  block:
    - name: Gather the package facts
      package_facts:
        manager: auto
    - name: Enable service auditd
      systemd:
        name: auditd
        enabled: "yes"
        state: started
        masked: "no"
      when:
        - '"audit" in ansible_facts.packages'
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - '"audit" in ansible_facts.packages'
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Perform remediation of Audit rules for /usr/bin/sudo
  block:
    - name: Declare list of syscalls
      set_fact:
        syscalls: []
        syscall_grouping: []
    - name: Check existence of  in /etc/audit/rules.d/
      find:
        paths: /etc/audit/rules.d
        contains:
          -a always,exit(( -S |,)\w+)*(( -S |,){{ item }})+(( -S |,)\w+)* -F
          path=/usr/bin/sudo -F perm=x -F auid>=1000 -F auid!=unset (-k\s+|-F\s+key=)\S+\s*$
        patterns: "*.rules"
      register: find_command
      loop: "{{ (syscall_grouping + syscalls) | unique }}"
    - name: Reset syscalls found per file
      set_fact:
        syscalls_per_file: {}
        found_paths_dict: {}
    - name: Declare syscalls found per file
      set_fact:
        syscalls_per_file="{{ syscalls_per_file | combine( {item.files[0].path
        :[item.item] + syscalls_per_file.get(item.files[0].path, []) } ) }}"
      loop: "{{ find_command.results | selectattr('matched') | list }}"
    - name: Declare files where syscalls were found
      set_fact:
        found_paths="{{ find_command.results | map(attribute='files') | flatten
        | map(attribute='path') | list }}"
    - name: Count occurrences of syscalls in paths
      set_fact:
        found_paths_dict="{{ found_paths_dict | combine({ item:1+found_paths_dict.get(item,
        0) }) }}"
      loop:
        "{{ find_command.results | map(attribute='files') | flatten | map(attribute='path')
        | list }}"
    - name: Get path with most syscalls
      set_fact:
        audit_file="{{ (found_paths_dict | dict2items() | sort(attribute='value')
        | last).key }}"
      when: found_paths | length >= 1
    - name: No file with syscall found, set path to /etc/audit/rules.d/privileged.rules
      set_fact: audit_file="/etc/audit/rules.d/privileged.rules"
      when: found_paths | length == 0
    - name: Declare found syscalls
      set_fact:
        syscalls_found="{{ find_command.results | selectattr('matched') | map(attribute='item')
        | list }}"
    - name: Declare missing syscalls
      set_fact: missing_syscalls="{{ syscalls | difference(syscalls_found) }}"
    - name: Replace the audit rule in {{ audit_file }}
      lineinfile:
        path: "{{ audit_file }}"
        regexp:
          (-a always,exit)(?=.*(?:(?:-S |,)(?:{{ syscalls_per_file[audit_file]
          | join("|") }}))\b)((?:( -S |,)\w+)+)( -F path=/usr/bin/sudo -F perm=x -F
          auid>=1000 -F auid!=unset (?:-k |-F key=)\w+)
        line: \1\2\3{{ missing_syscalls | join("\3") }}\4
        backrefs: true
        state: present
      when: syscalls_found | length > 0 and missing_syscalls | length > 0
    - name: Add the audit rule to {{ audit_file }}
      lineinfile:
        path: "{{ audit_file }}"
        line:
          -a always,exit{{ syscalls | join(',') }} -F path=/usr/bin/sudo -F perm=x
          -F auid>=1000 -F auid!=unset -F key=privileged
        create: true
        mode: o-rwx
        state: present
      when: syscalls_found | length == 0
    - name: Declare list of syscalls
      set_fact:
        syscalls: []
        syscall_grouping: []
    - name: Check existence of  in /etc/audit/audit.rules
      find:
        paths: /etc/audit
        contains:
          -a always,exit(( -S |,)\w+)*(( -S |,){{ item }})+(( -S |,)\w+)* -F
          path=/usr/bin/sudo -F perm=x -F auid>=1000 -F auid!=unset (-k\s+|-F\s+key=)\S+\s*$
        patterns: audit.rules
      register: find_command
      loop: "{{ (syscall_grouping + syscalls) | unique }}"
    - name: Set path to /etc/audit/audit.rules
      set_fact: audit_file="/etc/audit/audit.rules"
    - name: Declare found syscalls
      set_fact:
        syscalls_found="{{ find_command.results | selectattr('matched') | map(attribute='item')
        | list }}"
    - name: Declare missing syscalls
      set_fact: missing_syscalls="{{ syscalls | difference(syscalls_found) }}"
    - name: Replace the audit rule in {{ audit_file }}
      lineinfile:
        path: "{{ audit_file }}"
        regexp:
          (-a always,exit)(?=.*(?:(?:-S |,)(?:{{ syscalls_found | join("|") }}))\b)((?:(
          -S |,)\w+)+)( -F path=/usr/bin/sudo -F perm=x -F auid>=1000 -F auid!=unset
          (?:-k |-F key=)\w+)
        line: \1\2\3{{ missing_syscalls | join("\3") }}\4
        backrefs: true
        state: present
      when: syscalls_found | length > 0 and missing_syscalls | length > 0
    - name: Add the audit rule to {{ audit_file }}
      lineinfile:
        path: "{{ audit_file }}"
        line:
          -a always,exit{{ syscalls | join(',') }} -F path=/usr/bin/sudo -F perm=x
          -F auid>=1000 -F auid!=unset -F key=privileged
        create: true
        mode: o-rwx
        state: present
      when: syscalls_found | length == 0
  when:
    - '"audit" in ansible_facts.packages'
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Update grub defaults and the bootloader menu
  command: /sbin/grubby --update-kernel=ALL --args="l1tf={{ var_l1tf_options }}"
  when:
    - '"grub2-common" in ansible_facts.packages'
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Update grub defaults and the bootloader menu
  command: /sbin/grubby --update-kernel=ALL --args="mce=0"
  when:
    - '"grub2-common" in ansible_facts.packages'
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Update grub defaults and the bootloader menu
  command: /sbin/grubby --update-kernel=ALL --args="pti=on"
  when:
    - '"grub2-common" in ansible_facts.packages'
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Update grub defaults and the bootloader menu
  command:
    /sbin/grubby --update-kernel=ALL --args="rng_core.default_quality={{ var_rng_core_default_quality
    }}"
  when:
    - '"grub2-common" in ansible_facts.packages'
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Update grub defaults and the bootloader menu
  command: /sbin/grubby --update-kernel=ALL --args="slab_nomerge=yes"
  when:
    - '"grub2-common" in ansible_facts.packages'
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Update grub defaults and the bootloader menu
  command:
    /sbin/grubby --update-kernel=ALL --args="spec_store_bypass_disable={{ var_spec_store_bypass_disable_options
    }}"
  when:
    - '"grub2-common" in ansible_facts.packages'
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Update grub defaults and the bootloader menu
  command: /sbin/grubby --update-kernel=ALL --args="spectre_v2=on"
  when:
    - '"grub2-common" in ansible_facts.packages'
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.all.accept_ra_defrtr.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.all.accept_ra_defrtr from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.all.accept_ra_defrtr
    replace: "#net.ipv6.conf.all.accept_ra_defrtr"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.all.accept_ra_defrtr is set
  sysctl:
    name: net.ipv6.conf.all.accept_ra_defrtr
    value: "{{ sysctl_net_ipv6_conf_all_accept_ra_defrtr_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.all.accept_ra_pinfo.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.all.accept_ra_pinfo from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.all.accept_ra_pinfo
    replace: "#net.ipv6.conf.all.accept_ra_pinfo"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.all.accept_ra_pinfo is set
  sysctl:
    name: net.ipv6.conf.all.accept_ra_pinfo
    value: "{{ sysctl_net_ipv6_conf_all_accept_ra_pinfo_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.all.accept_ra_rtr_pref.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.all.accept_ra_rtr_pref from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.all.accept_ra_rtr_pref
    replace: "#net.ipv6.conf.all.accept_ra_rtr_pref"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.all.accept_ra_rtr_pref is set
  sysctl:
    name: net.ipv6.conf.all.accept_ra_rtr_pref
    value: "{{ sysctl_net_ipv6_conf_all_accept_ra_rtr_pref_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.all.accept_redirects.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.all.accept_redirects from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.all.accept_redirects
    replace: "#net.ipv6.conf.all.accept_redirects"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.all.accept_redirects is set
  sysctl:
    name: net.ipv6.conf.all.accept_redirects
    value: "{{ sysctl_net_ipv6_conf_all_accept_redirects_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.all.accept_source_route.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.all.accept_source_route from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.all.accept_source_route
    replace: "#net.ipv6.conf.all.accept_source_route"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.all.accept_source_route is set
  sysctl:
    name: net.ipv6.conf.all.accept_source_route
    value: "{{ sysctl_net_ipv6_conf_all_accept_source_route_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.all.autoconf.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of net.ipv6.conf.all.autoconf from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.all.autoconf
    replace: "#net.ipv6.conf.all.autoconf"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.all.autoconf is set
  sysctl:
    name: net.ipv6.conf.all.autoconf
    value: "{{ sysctl_net_ipv6_conf_all_autoconf_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.all.max_addresses.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.all.max_addresses from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.all.max_addresses
    replace: "#net.ipv6.conf.all.max_addresses"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.all.max_addresses is set
  sysctl:
    name: net.ipv6.conf.all.max_addresses
    value: "{{ sysctl_net_ipv6_conf_all_max_addresses_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.all.router_solicitations.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.all.router_solicitations from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.all.router_solicitations
    replace: "#net.ipv6.conf.all.router_solicitations"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.all.router_solicitations is set
  sysctl:
    name: net.ipv6.conf.all.router_solicitations
    value: "{{ sysctl_net_ipv6_conf_all_router_solicitations_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.default.accept_ra_defrtr.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.default.accept_ra_defrtr from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.default.accept_ra_defrtr
    replace: "#net.ipv6.conf.default.accept_ra_defrtr"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.default.accept_ra_defrtr is set
  sysctl:
    name: net.ipv6.conf.default.accept_ra_defrtr
    value: "{{ sysctl_net_ipv6_conf_default_accept_ra_defrtr_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.default.accept_ra_pinfo.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.default.accept_ra_pinfo from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.default.accept_ra_pinfo
    replace: "#net.ipv6.conf.default.accept_ra_pinfo"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.default.accept_ra_pinfo is set
  sysctl:
    name: net.ipv6.conf.default.accept_ra_pinfo
    value: "{{ sysctl_net_ipv6_conf_default_accept_ra_pinfo_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.default.accept_ra_rtr_pref.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.default.accept_ra_rtr_pref from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.default.accept_ra_rtr_pref
    replace: "#net.ipv6.conf.default.accept_ra_rtr_pref"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.default.accept_ra_rtr_pref is set
  sysctl:
    name: net.ipv6.conf.default.accept_ra_rtr_pref
    value: "{{ sysctl_net_ipv6_conf_default_accept_ra_rtr_pref_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.default.accept_redirects.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.default.accept_redirects from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.default.accept_redirects
    replace: "#net.ipv6.conf.default.accept_redirects"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.default.accept_redirects is set
  sysctl:
    name: net.ipv6.conf.default.accept_redirects
    value: "{{ sysctl_net_ipv6_conf_default_accept_redirects_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.default.accept_source_route.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.default.accept_source_route from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.default.accept_source_route
    replace: "#net.ipv6.conf.default.accept_source_route"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.default.accept_source_route is set
  sysctl:
    name: net.ipv6.conf.default.accept_source_route
    value: "{{ sysctl_net_ipv6_conf_default_accept_source_route_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.default.autoconf.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.default.autoconf from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.default.autoconf
    replace: "#net.ipv6.conf.default.autoconf"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.default.autoconf is set
  sysctl:
    name: net.ipv6.conf.default.autoconf
    value: "{{ sysctl_net_ipv6_conf_default_autoconf_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.default.max_addresses.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.default.max_addresses from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.default.max_addresses
    replace: "#net.ipv6.conf.default.max_addresses"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.default.max_addresses is set
  sysctl:
    name: net.ipv6.conf.default.max_addresses
    value: "{{ sysctl_net_ipv6_conf_default_max_addresses_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv6.conf.default.router_solicitations.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv6.conf.default.router_solicitations
    from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv6.conf.default.router_solicitations
    replace: "#net.ipv6.conf.default.router_solicitations"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv6.conf.default.router_solicitations is set
  sysctl:
    name: net.ipv6.conf.default.router_solicitations
    value: "{{ sysctl_net_ipv6_conf_default_router_solicitations_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.accept_local.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.all.accept_local from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.accept_local
    replace: "#net.ipv4.conf.all.accept_local"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.accept_local is set to 0
  sysctl:
    name: net.ipv4.conf.all.accept_local
    value: "0"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.accept_redirects.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.all.accept_redirects from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.accept_redirects
    replace: "#net.ipv4.conf.all.accept_redirects"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.accept_redirects is set
  sysctl:
    name: net.ipv4.conf.all.accept_redirects
    value: "{{ sysctl_net_ipv4_conf_all_accept_redirects_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.accept_source_route.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.all.accept_source_route from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.accept_source_route
    replace: "#net.ipv4.conf.all.accept_source_route"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.accept_source_route is set
  sysctl:
    name: net.ipv4.conf.all.accept_source_route
    value: "{{ sysctl_net_ipv4_conf_all_accept_source_route_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.arp_filter.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of net.ipv4.conf.all.arp_filter from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.arp_filter
    replace: "#net.ipv4.conf.all.arp_filter"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.arp_filter is set
  sysctl:
    name: net.ipv4.conf.all.arp_filter
    value: "{{ sysctl_net_ipv4_conf_all_arp_filter_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.arp_ignore.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of net.ipv4.conf.all.arp_ignore from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.arp_ignore
    replace: "#net.ipv4.conf.all.arp_ignore"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.arp_ignore is set
  sysctl:
    name: net.ipv4.conf.all.arp_ignore
    value: "{{ sysctl_net_ipv4_conf_all_arp_ignore_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.drop_gratuitous_arp.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.all.drop_gratuitous_arp from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.drop_gratuitous_arp
    replace: "#net.ipv4.conf.all.drop_gratuitous_arp"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.drop_gratuitous_arp is set to 1
  sysctl:
    name: net.ipv4.conf.all.drop_gratuitous_arp
    value: "1"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.route_localnet.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.all.route_localnet from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.route_localnet
    replace: "#net.ipv4.conf.all.route_localnet"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.route_localnet is set to 0
  sysctl:
    name: net.ipv4.conf.all.route_localnet
    value: "0"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.rp_filter.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of net.ipv4.conf.all.rp_filter from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.rp_filter
    replace: "#net.ipv4.conf.all.rp_filter"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.rp_filter is set
  sysctl:
    name: net.ipv4.conf.all.rp_filter
    value: "{{ sysctl_net_ipv4_conf_all_rp_filter_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.secure_redirects.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.all.secure_redirects from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.secure_redirects
    replace: "#net.ipv4.conf.all.secure_redirects"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.secure_redirects is set
  sysctl:
    name: net.ipv4.conf.all.secure_redirects
    value: "{{ sysctl_net_ipv4_conf_all_secure_redirects_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.shared_media.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.all.shared_media from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.shared_media
    replace: "#net.ipv4.conf.all.shared_media"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.shared_media is set
  sysctl:
    name: net.ipv4.conf.all.shared_media
    value: "{{ sysctl_net_ipv4_conf_all_shared_media_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.default.accept_redirects.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.default.accept_redirects from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.default.accept_redirects
    replace: "#net.ipv4.conf.default.accept_redirects"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.default.accept_redirects is set
  sysctl:
    name: net.ipv4.conf.default.accept_redirects
    value: "{{ sysctl_net_ipv4_conf_default_accept_redirects_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.default.accept_source_route.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.default.accept_source_route from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.default.accept_source_route
    replace: "#net.ipv4.conf.default.accept_source_route"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.default.accept_source_route is set
  sysctl:
    name: net.ipv4.conf.default.accept_source_route
    value: "{{ sysctl_net_ipv4_conf_default_accept_source_route_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.default.rp_filter.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.default.rp_filter from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.default.rp_filter
    replace: "#net.ipv4.conf.default.rp_filter"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.default.rp_filter is set
  sysctl:
    name: net.ipv4.conf.default.rp_filter
    value: "{{ sysctl_net_ipv4_conf_default_rp_filter_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.default.secure_redirects.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.default.secure_redirects from
    config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.default.secure_redirects
    replace: "#net.ipv4.conf.default.secure_redirects"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.default.secure_redirects is set
  sysctl:
    name: net.ipv4.conf.default.secure_redirects
    value: "{{ sysctl_net_ipv4_conf_default_secure_redirects_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.default.shared_media.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.default.shared_media from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.default.shared_media
    replace: "#net.ipv4.conf.default.shared_media"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.default.shared_media is set
  sysctl:
    name: net.ipv4.conf.default.shared_media
    value: "{{ sysctl_net_ipv4_conf_default_shared_media_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.icmp_ignore_bogus_error_responses.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.icmp_ignore_bogus_error_responses
    from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.icmp_ignore_bogus_error_responses
    replace: "#net.ipv4.icmp_ignore_bogus_error_responses"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.icmp_ignore_bogus_error_responses is set
  sysctl:
    name: net.ipv4.icmp_ignore_bogus_error_responses
    value: "{{ sysctl_net_ipv4_icmp_ignore_bogus_error_responses_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.ip_local_port_range.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of net.ipv4.ip_local_port_range from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.ip_local_port_range
    replace: "#net.ipv4.ip_local_port_range"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.ip_local_port_range is set to 32768 65535
  sysctl:
    name: net.ipv4.ip_local_port_range
    value: 32768 65535
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.tcp_rfc1337.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of net.ipv4.tcp_rfc1337 from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.tcp_rfc1337
    replace: "#net.ipv4.tcp_rfc1337"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.tcp_rfc1337 is set
  sysctl:
    name: net.ipv4.tcp_rfc1337
    value: "{{ sysctl_net_ipv4_tcp_rfc1337_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.tcp_syncookies.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of net.ipv4.tcp_syncookies from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.tcp_syncookies
    replace: "#net.ipv4.tcp_syncookies"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.tcp_syncookies is set
  sysctl:
    name: net.ipv4.tcp_syncookies
    value: "{{ sysctl_net_ipv4_tcp_syncookies_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.all.send_redirects.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.all.send_redirects from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.all.send_redirects
    replace: "#net.ipv4.conf.all.send_redirects"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.all.send_redirects is set to 0
  sysctl:
    name: net.ipv4.conf.all.send_redirects
    value: "0"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.conf.default.send_redirects.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of net.ipv4.conf.default.send_redirects from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.conf.default.send_redirects
    replace: "#net.ipv4.conf.default.send_redirects"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.conf.default.send_redirects is set to 0
  sysctl:
    name: net.ipv4.conf.default.send_redirects
    value: "0"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.ipv4.ip_forward.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of net.ipv4.ip_forward from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.ipv4.ip_forward
    replace: "#net.ipv4.ip_forward"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.ipv4.ip_forward is set to 0
  sysctl:
    name: net.ipv4.ip_forward
    value: "0"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*fs.protected_hardlinks.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of fs.protected_hardlinks from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*fs.protected_hardlinks
    replace: "#fs.protected_hardlinks"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl fs.protected_hardlinks is set to 1
  sysctl:
    name: fs.protected_hardlinks
    value: "1"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*fs.protected_symlinks.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of fs.protected_symlinks from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*fs.protected_symlinks
    replace: "#fs.protected_symlinks"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl fs.protected_symlinks is set to 1
  sysctl:
    name: fs.protected_symlinks
    value: "1"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Test for existence /etc/gshadow
  stat:
    path: /etc/gshadow
  register: file_exists
- name: Ensure owner 0 on /etc/gshadow
  file:
    path: /etc/gshadow
    owner: "0"
  when: file_exists.stat is defined and file_exists.stat.exists
- name: Test for existence /etc/shadow
  stat:
    path: /etc/shadow
  register: file_exists
- name: Ensure owner 0 on /etc/shadow
  file:
    path: /etc/shadow
    owner: "0"
  when: file_exists.stat is defined and file_exists.stat.exists
- name: Test for existence /etc/group
  stat:
    path: /etc/group
  register: file_exists
- name: Ensure permission u-xs,g-xws,o-xwt on /etc/group
  file:
    path: /etc/group
    mode: u-xs,g-xws,o-xwt
  when: file_exists.stat is defined and file_exists.stat.exists
- name: Test for existence /etc/gshadow
  stat:
    path: /etc/gshadow
  register: file_exists
- name: Ensure permission u-xwrs,g-xwrs,o-xwrt on /etc/gshadow
  file:
    path: /etc/gshadow
    mode: u-xwrs,g-xwrs,o-xwrt
  when: file_exists.stat is defined and file_exists.stat.exists
- name: Test for existence /etc/passwd
  stat:
    path: /etc/passwd
  register: file_exists
- name: Ensure permission u-xs,g-xws,o-xwt on /etc/passwd
  file:
    path: /etc/passwd
    mode: u-xs,g-xws,o-xwt
  when: file_exists.stat is defined and file_exists.stat.exists
- name: Test for existence /etc/shadow
  stat:
    path: /etc/shadow
  register: file_exists
- name: Ensure permission u-xwrs,g-xwrs,o-xwrt on /etc/shadow
  file:
    path: /etc/shadow
    mode: u-xwrs,g-xwrs,o-xwrt
  when: file_exists.stat is defined and file_exists.stat.exists
- name: "Add noexec Option to /boot: Check information associated to mountpoint"
  command: findmnt --fstab '/boot'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: "Add noexec Option to /boot: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name: "Add noexec Option to /boot: If /boot not mounted, craft mount_info manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /boot
      - ""
      - ""
      - defaults
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add noexec Option to /boot: Make sure noexec option is part of the to /boot
    options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',noexec'
      }) }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - mount_info is defined and "noexec" not in mount_info.options
- name: "Add noexec Option to /boot: Ensure /boot is mounted with noexec option"
  mount:
    path: /boot
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add nosuid Option to /boot: Check information associated to mountpoint"
  command: findmnt --fstab '/boot'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: "Add nosuid Option to /boot: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name: "Add nosuid Option to /boot: If /boot not mounted, craft mount_info manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /boot
      - ""
      - ""
      - defaults
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add nosuid Option to /boot: Make sure nosuid option is part of the to /boot
    options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',nosuid'
      }) }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - mount_info is defined and "nosuid" not in mount_info.options
- name: "Add nosuid Option to /boot: Ensure /boot is mounted with nosuid option"
  mount:
    path: /boot
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add noexec Option to /home: Check information associated to mountpoint"
  command: findmnt --fstab '/home'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: "Add noexec Option to /home: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name: "Add noexec Option to /home: If /home not mounted, craft mount_info manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /home
      - ""
      - ""
      - defaults
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add noexec Option to /home: Make sure noexec option is part of the to /home
    options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',noexec'
      }) }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - mount_info is defined and "noexec" not in mount_info.options
- name: "Add noexec Option to /home: Ensure /home is mounted with noexec option"
  mount:
    path: /home
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add nosuid Option to /home: Check information associated to mountpoint"
  command: findmnt --fstab '/home'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/home" in ansible_mounts | map(attribute="mount") | list )
- name: "Add nosuid Option to /home: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/home" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name: "Add nosuid Option to /home: If /home not mounted, craft mount_info manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /home
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/home" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add nosuid Option to /home: Make sure nosuid option is part of the to /home
    options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',nosuid'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/home" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "nosuid" not in mount_info.options
- name: "Add nosuid Option to /home: Ensure /home is mounted with nosuid option"
  mount:
    path: /home
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/home" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: Ensure non-root local partitions are mounted with nodev option
  mount:
    path: "{{ item.mount }}"
    src: "{{ item.device }}"
    opts: "{{ item.options }},nodev"
    state: mounted
    fstype: "{{ item.fstype }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - item.mount is match('/\w')
    - item.options is not search('nodev')
  with_items:
    - "{{ ansible_facts.mounts }}"
- name: "Add nosuid Option to /opt: Check information associated to mountpoint"
  command: findmnt --fstab '/opt'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/opt" in ansible_mounts | map(attribute="mount") | list )
- name: "Add nosuid Option to /opt: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/opt" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name: "Add nosuid Option to /opt: If /opt not mounted, craft mount_info manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /opt
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/opt" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add nosuid Option to /opt: Make sure nosuid option is part of the to /opt
    options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',nosuid'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/opt" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "nosuid" not in mount_info.options
- name: "Add nosuid Option to /opt: Ensure /opt is mounted with nosuid option"
  mount:
    path: /opt
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/opt" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add nosuid Option to /srv: Check information associated to mountpoint"
  command: findmnt --fstab '/srv'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/srv" in ansible_mounts | map(attribute="mount") | list )
- name: "Add nosuid Option to /srv: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/srv" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name: "Add nosuid Option to /srv: If /srv not mounted, craft mount_info manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /srv
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/srv" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add nosuid Option to /srv: Make sure nosuid option is part of the to /srv
    options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',nosuid'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/srv" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "nosuid" not in mount_info.options
- name: "Add nosuid Option to /srv: Ensure /srv is mounted with nosuid option"
  mount:
    path: /srv
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/srv" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add noexec Option to /tmp: Check information associated to mountpoint"
  command: findmnt --fstab '/tmp'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/tmp" in ansible_mounts | map(attribute="mount") | list )
- name: "Add noexec Option to /tmp: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/tmp" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name: "Add noexec Option to /tmp: If /tmp not mounted, craft mount_info manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /tmp
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/tmp" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add noexec Option to /tmp: Make sure noexec option is part of the to /tmp
    options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',noexec'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/tmp" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "noexec" not in mount_info.options
- name: "Add noexec Option to /tmp: Ensure /tmp is mounted with noexec option"
  mount:
    path: /tmp
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/tmp" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add nosuid Option to /tmp: Check information associated to mountpoint"
  command: findmnt --fstab '/tmp'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/tmp" in ansible_mounts | map(attribute="mount") | list )
- name: "Add nosuid Option to /tmp: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/tmp" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name: "Add nosuid Option to /tmp: If /tmp not mounted, craft mount_info manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /tmp
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/tmp" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add nosuid Option to /tmp: Make sure nosuid option is part of the to /tmp
    options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',nosuid'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/tmp" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "nosuid" not in mount_info.options
- name: "Add nosuid Option to /tmp: Ensure /tmp is mounted with nosuid option"
  mount:
    path: /tmp
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/tmp" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add noexec Option to /var/log: Check information associated to mountpoint"
  command: findmnt --fstab '/var/log'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/var/log" in ansible_mounts | map(attribute="mount") | list
    )
- name: "Add noexec Option to /var/log: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/log" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name:
    "Add noexec Option to /var/log: If /var/log not mounted, craft mount_info
    manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /var/log
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/log" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add noexec Option to /var/log: Make sure noexec option is part of the to
    /var/log options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',noexec'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/log" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "noexec" not in mount_info.options
- name: "Add noexec Option to /var/log: Ensure /var/log is mounted with noexec option"
  mount:
    path: /var/log
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/log" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add nosuid Option to /var/log: Check information associated to mountpoint"
  command: findmnt --fstab '/var/log'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/var/log" in ansible_mounts | map(attribute="mount") | list
    )
- name: "Add nosuid Option to /var/log: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/log" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name:
    "Add nosuid Option to /var/log: If /var/log not mounted, craft mount_info
    manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /var/log
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/log" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add nosuid Option to /var/log: Make sure nosuid option is part of the to
    /var/log options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',nosuid'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/log" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "nosuid" not in mount_info.options
- name: "Add nosuid Option to /var/log: Ensure /var/log is mounted with nosuid option"
  mount:
    path: /var/log
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/log" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add noexec Option to /var: Check information associated to mountpoint"
  command: findmnt --fstab '/var'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/var" in ansible_mounts | map(attribute="mount") | list )
- name: "Add noexec Option to /var: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name: "Add noexec Option to /var: If /var not mounted, craft mount_info manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /var
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add noexec Option to /var: Make sure noexec option is part of the to /var
    options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',noexec'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "noexec" not in mount_info.options
- name: "Add noexec Option to /var: Ensure /var is mounted with noexec option"
  mount:
    path: /var
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add nosuid Option to /var: Check information associated to mountpoint"
  command: findmnt --fstab '/var'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/var" in ansible_mounts | map(attribute="mount") | list )
- name: "Add nosuid Option to /var: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name: "Add nosuid Option to /var: If /var not mounted, craft mount_info manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /var
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add nosuid Option to /var: Make sure nosuid option is part of the to /var
    options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',nosuid'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "nosuid" not in mount_info.options
- name: "Add nosuid Option to /var: Ensure /var is mounted with nosuid option"
  mount:
    path: /var
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add noexec Option to /var/tmp: Check information associated to mountpoint"
  command: findmnt --fstab '/var/tmp'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/var/tmp" in ansible_mounts | map(attribute="mount") | list
    )
- name: "Add noexec Option to /var/tmp: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/tmp" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name:
    "Add noexec Option to /var/tmp: If /var/tmp not mounted, craft mount_info
    manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /var/tmp
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/tmp" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add noexec Option to /var/tmp: Make sure noexec option is part of the to
    /var/tmp options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',noexec'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/tmp" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "noexec" not in mount_info.options
- name: "Add noexec Option to /var/tmp: Ensure /var/tmp is mounted with noexec option"
  mount:
    path: /var/tmp
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/tmp" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: "Add nosuid Option to /var/tmp: Check information associated to mountpoint"
  command: findmnt --fstab '/var/tmp'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: false
  when:
    ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman",
    "container"] and "/var/tmp" in ansible_mounts | map(attribute="mount") | list
    )
- name: "Add nosuid Option to /var/tmp: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/tmp" in ansible_mounts | map(attribute="mount") | list )
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)
- name:
    "Add nosuid Option to /var/tmp: If /var/tmp not mounted, craft mount_info
    manually"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - - target
      - source
      - fstype
      - options
    - - /var/tmp
      - ""
      - ""
      - defaults
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/tmp" in ansible_mounts | map(attribute="mount") | list )
    - ("--fstab" | length == 0)
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length == 0)
- name:
    "Add nosuid Option to /var/tmp: Make sure nosuid option is part of the to
    /var/tmp options"
  set_fact:
    mount_info:
      "{{ mount_info | combine( {'options':''~mount_info.options~',nosuid'
      }) }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/tmp" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined and "nosuid" not in mount_info.options
- name: "Add nosuid Option to /var/tmp: Ensure /var/tmp is mounted with nosuid option"
  mount:
    path: /var/tmp
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: mounted
    fstype: "{{ mount_info.fstype }}"
  when:
    - ( ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      and "/var/tmp" in ansible_mounts | map(attribute="mount") | list )
    - mount_info is defined
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab"
      | length == 0)
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.dmesg_restrict.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of kernel.dmesg_restrict from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.dmesg_restrict
    replace: "#kernel.dmesg_restrict"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.dmesg_restrict is set to 1
  sysctl:
    name: kernel.dmesg_restrict
    value: "1"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.panic_on_oops.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of kernel.panic_on_oops from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.panic_on_oops
    replace: "#kernel.panic_on_oops"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.panic_on_oops is set to 1
  sysctl:
    name: kernel.panic_on_oops
    value: "1"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.perf_cpu_time_max_percent.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of kernel.perf_cpu_time_max_percent from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.perf_cpu_time_max_percent
    replace: "#kernel.perf_cpu_time_max_percent"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.perf_cpu_time_max_percent is set to 1
  sysctl:
    name: kernel.perf_cpu_time_max_percent
    value: "1"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.perf_event_max_sample_rate.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of kernel.perf_event_max_sample_rate from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.perf_event_max_sample_rate
    replace: "#kernel.perf_event_max_sample_rate"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.perf_event_max_sample_rate is set to 1
  sysctl:
    name: kernel.perf_event_max_sample_rate
    value: "1"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.perf_event_paranoid.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of kernel.perf_event_paranoid from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.perf_event_paranoid
    replace: "#kernel.perf_event_paranoid"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.perf_event_paranoid is set to 2
  sysctl:
    name: kernel.perf_event_paranoid
    value: "2"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.pid_max.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of kernel.pid_max from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.pid_max
    replace: "#kernel.pid_max"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.pid_max is set to 65536
  sysctl:
    name: kernel.pid_max
    value: "65536"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.sysrq.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of kernel.sysrq from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.sysrq
    replace: "#kernel.sysrq"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.sysrq is set to 0
  sysctl:
    name: kernel.sysrq
    value: "0"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.unprivileged_bpf_disabled.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Comment out any occurrences of kernel.unprivileged_bpf_disabled from config
    files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.unprivileged_bpf_disabled
    replace: "#kernel.unprivileged_bpf_disabled"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.unprivileged_bpf_disabled is set to 1
  sysctl:
    name: kernel.unprivileged_bpf_disabled
    value: "1"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.yama.ptrace_scope.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of kernel.yama.ptrace_scope from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.yama.ptrace_scope
    replace: "#kernel.yama.ptrace_scope"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.yama.ptrace_scope is set to 1
  sysctl:
    name: kernel.yama.ptrace_scope
    value: "1"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*net.core.bpf_jit_harden.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of net.core.bpf_jit_harden from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*net.core.bpf_jit_harden
    replace: "#net.core.bpf_jit_harden"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl net.core.bpf_jit_harden is set to 2
  sysctl:
    name: net.core.bpf_jit_harden
    value: "2"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*vm.mmap_min_addr.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of vm.mmap_min_addr from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*vm.mmap_min_addr
    replace: "#vm.mmap_min_addr"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl vm.mmap_min_addr is set to 65536
  sysctl:
    name: vm.mmap_min_addr
    value: "65536"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*fs.suid_dumpable.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of fs.suid_dumpable from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*fs.suid_dumpable
    replace: "#fs.suid_dumpable"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl fs.suid_dumpable is set to 0
  sysctl:
    name: fs.suid_dumpable
    value: "0"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.kptr_restrict.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of kernel.kptr_restrict from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.kptr_restrict
    replace: "#kernel.kptr_restrict"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.kptr_restrict is set
  sysctl:
    name: kernel.kptr_restrict
    value: "{{ sysctl_kernel_kptr_restrict_value }}"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: List /etc/sysctl.d/*.conf files
  find:
    paths:
      - /etc/sysctl.d/
      - /run/sysctl.d/
      - /usr/local/lib/sysctl.d/
    contains: ^[\s]*kernel.randomize_va_space.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Comment out any occurrences of kernel.randomize_va_space from config files
  replace:
    path: "{{ item.path }}"
    regexp: ^[\s]*kernel.randomize_va_space
    replace: "#kernel.randomize_va_space"
  loop: "{{ find_sysctl_d.files }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Ensure sysctl kernel.randomize_va_space is set to 2
  sysctl:
    name: kernel.randomize_va_space
    value: "2"
    sysctl_file: /etc/sysctl.conf
    state: present
    reload: true
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Update grub defaults and the bootloader menu
  command: /sbin/grubby --update-kernel=ALL --args="page_poison=1"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - '"grub2-common" in ansible_facts.packages'
- name: Gather the package facts
  package_facts:
    manager: auto
- name: Update grub defaults and the bootloader menu
  command:
    /sbin/grubby --update-kernel=ALL --args="slub_debug={{ var_slub_debug_options
    }}"
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - '"grub2-common" in ansible_facts.packages'
- name: Ensure SELinux State is Enforcing
  block:
    - name: Check for duplicate values
      lineinfile:
        path: /etc/selinux/config
        create: true
        regexp: ^SELINUX=
        state: absent
      check_mode: true
      changed_when: false
      register: dupes
    - name: Deduplicate values from /etc/selinux/config
      lineinfile:
        path: /etc/selinux/config
        create: true
        regexp: ^SELINUX=
        state: absent
      when: dupes.found is defined and dupes.found > 1
    - name: Insert correct line to /etc/selinux/config
      lineinfile:
        path: /etc/selinux/config
        create: true
        regexp: ^SELINUX=
        line: SELINUX={{ var_selinux_state }}
        state: present
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Configure the polyinstantiation_enabled SELinux Boolean - Ensure python3-libsemanage
    Installed
  package:
    name: python3-libsemanage
    state: present
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name:
    Configure the polyinstantiation_enabled SELinux Boolean - Set SELinux Boolean
    polyinstantiation_enabled Accordingly
  seboolean:
    name: polyinstantiation_enabled
    state: "{{ var_polyinstantiation_enabled }}"
    persistent: true
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - ansible_facts.selinux.status == 'enabled'
- name: Ensure dhcp-server is removed
  package:
    name: dhcp-server
    state: absent
- name: Ensure sendmail is removed
  package:
    name: sendmail
    state: absent
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Make sure that "/etc/aliases" has a defined value for root
  lineinfile:
    path: /etc/aliases
    line: "root: {{ var_postfix_root_mail_alias }}"
    regexp: ^(?:[rR][oO][oO][tT]|"[rR][oO][oO][tT]")\s*:\s*(.+)$
    create: true
    state: present
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Check if newaliases command is available
  ansible.builtin.stat:
    path: /usr/bin/newaliases
  register: result_newaliases_present
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Update postfix aliases
  ansible.builtin.command:
    cmd: newaliases
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - result_newaliases_present.stat.exists
- name: Gather list of packages
  package_facts:
    manager: auto
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - ""
- name: Make changes to Postfix configuration file
  lineinfile:
    path: /etc/postfix/main.cf
    create: false
    regexp: ^inet_interfaces\s*=\s.*
    line: inet_interfaces = {{ var_postfix_inet_interfaces }}
    state: present
    insertafter: ^inet_interfaces\s*=\s.*
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - '"postfix" in ansible_facts.packages'
    - '"postfix" in ansible_facts.packages'
- name: Find root:root-owned keys
  ansible.builtin.command:
    find -H /etc/ssh/ -maxdepth 1 -user root -regex ".*_key$"
    -type f -group root -perm /u+xs,g+xwrs,o+xwrt
  register: root_owned_keys
  changed_when: false
  failed_when: false
  check_mode: false
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Set permissions for root:root-owned keys
  ansible.builtin.file:
    path: "{{ item }}"
    mode: u-xs,g-xwrs,o-xwrt
    state: file
  with_items:
    - "{{ root_owned_keys.stdout_lines }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Find root:ssh_keys-owned keys
  ansible.builtin.command:
    find -H /etc/ssh/ -maxdepth 1 -user root -regex ".*_key$"
    -type f -group ssh_keys -perm /u+xs,g+xws,o+xwrt
  register: dedicated_group_owned_keys
  changed_when: false
  failed_when: false
  check_mode: false
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Set permissions for root:ssh_keys-owned keys
  ansible.builtin.file:
    path: "{{ item }}"
    mode: u-xs,g-xws,o-xwrt
    state: file
  with_items:
    - "{{ dedicated_group_owned_keys.stdout_lines }}"
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Set SSH Client Alive Count Max
  block:
    - name: Check for duplicate values
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)^\s*ClientAliveCountMax\s+
        state: absent
      check_mode: true
      changed_when: false
      register: dupes
    - name: Deduplicate values from /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)^\s*ClientAliveCountMax\s+
        state: absent
      when: dupes.found is defined and dupes.found > 1
    - name: Insert correct line to /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)^\s*ClientAliveCountMax\s+
        line: ClientAliveCountMax {{ var_sshd_set_keepalive }}
        state: present
        insertbefore: BOF
        validate: /usr/sbin/sshd -t -f %s
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
- name: Set SSH Client Alive Interval
  block:
    - name: Check for duplicate values
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)^\s*ClientAliveInterval\s+
        state: absent
      check_mode: true
      changed_when: false
      register: dupes
    - name: Deduplicate values from /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)^\s*ClientAliveInterval\s+
        state: absent
      when: dupes.found is defined and dupes.found > 1
    - name: Insert correct line to /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)^\s*ClientAliveInterval\s+
        line: ClientAliveInterval {{ sshd_idle_timeout_value }}
        state: present
        insertbefore: BOF
        validate: /usr/sbin/sshd -t -f %s
  when:
    - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
    - ansible_distribution == 'RedHat' and ansible_distribution_version is version('8.5',
      '<=')
- name: Disable SSH Root Login
  block:
    - name: Check for duplicate values
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)^\s*PermitRootLogin\s+
        state: absent
      check_mode: true
      changed_when: false
      register: dupes
    - name: Deduplicate values from /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)^\s*PermitRootLogin\s+
        state: absent
      when: dupes.found is defined and dupes.found > 1
    - name: Insert correct line to /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)^\s*PermitRootLogin\s+
        line: PermitRootLogin no
        state: present
        insertbefore: BOF
        validate: /usr/sbin/sshd -t -f %s
  when: ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
  tags:
    - CCE-80901-2
    - CJIS-5.5.6
    - DISA-STIG-RHEL-08-010550
    - NIST-800-171-3.1.1
    - NIST-800-171-3.1.5
    - NIST-800-53-AC-17(a)
    - NIST-800-53-AC-6(2)
    - NIST-800-53-CM-6(a)
    - NIST-800-53-CM-7(a)
    - NIST-800-53-CM-7(b)
    - NIST-800-53-IA-2
    - NIST-800-53-IA-2(5)
    - PCI-DSS-Req-2.2.4
    - PCI-DSSv4-2.2.6
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
    - restrict_strategy
    - sshd_disable_root_login
